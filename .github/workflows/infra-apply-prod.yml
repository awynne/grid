name: Plan + Apply Prod (CDKTF)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type APPLY to apply the planned changes to prod"
        required: true
        type: string

jobs:
  plan:
    runs-on: ubuntu-latest
    env:
      TF_CLOUD_ORG: ${{ secrets.TF_CLOUD_ORG }}
      TF_CLOUD_WORKSPACE: gridpulse-prod
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Decrypt tfvars from SOPS (required for plan)
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          if [ -n "${AGE_PRIVATE_KEY:-}" ]; then
            printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          fi
          if [ ! -f secrets/prod.enc.tfvars ]; then
            echo "secrets/prod.enc.tfvars not found. Commit encrypted tfvars or use Infra Plan workflow." >&2
            exit 1
          fi
          echo "Decrypting prod.enc.tfvars → infrastructure/cdktf/terraform.tfvars"
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars

      - name: Install CDKTF deps
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Validate docker_image is pinned (no :latest)
        working-directory: infrastructure/cdktf
        run: |
          set -euo pipefail
          if grep -qE '^\s*docker_image\s*=\s*"[^"]*:latest"' terraform.tfvars; then
            echo "Refusing to apply: docker_image is set to :latest. Pin a specific tag via Release Build PR." >&2
            exit 1
          fi

      - name: Synthesize stack (cdktf synth)
        working-directory: infrastructure/cdktf
        run: npx cdktf synth

      - name: Terraform init + plan
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          cp -f terraform.tfvars cdktf.out/stacks/gridpulse-prod/terraform.tfvars
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          terraform -chdir=cdktf.out/stacks/gridpulse-prod plan -input=false -no-color -out=tfplan
          # Write plan output to a stable path for upload
          terraform -chdir=cdktf.out/stacks/gridpulse-prod show -no-color tfplan > cdktf.out/stacks/gridpulse-prod/plan.txt

      - name: Upload plan output
        uses: actions/upload-artifact@v4
        with:
          name: cdktf-plan
          path: infrastructure/cdktf/cdktf.out/stacks/gridpulse-prod/plan.txt

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event.inputs.confirm == 'APPLY' }}
    environment:
      name: gridpulse/prod
    env:
      TF_CLOUD_ORG: ${{ secrets.TF_CLOUD_ORG }}
      TF_CLOUD_WORKSPACE: gridpulse-prod
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Decrypt tfvars (required)
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          if [ -z "${AGE_PRIVATE_KEY:-}" ]; then
            echo "AGE_PRIVATE_KEY not set; can't decrypt prod.enc.tfvars" >&2
            exit 1
          fi
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          if [ ! -f secrets/prod.enc.tfvars ]; then
            echo "secrets/prod.enc.tfvars not found. Commit encrypted tfvars first." >&2
            exit 1
          fi
          echo "Decrypting prod.enc.tfvars → infrastructure/cdktf/terraform.tfvars"
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars

      - name: Install CDKTF deps
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Validate docker_image is pinned (no :latest)
        working-directory: infrastructure/cdktf
        run: |
          set -euo pipefail
          if grep -qE '^\s*docker_image\s*=\s*"[^"]*:latest"' terraform.tfvars; then
            echo "Refusing to apply: docker_image is set to :latest. Pin a specific tag via Release Build PR." >&2
            exit 1
          fi

      - name: Apply infrastructure (synth + terraform apply)
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          # Synthesize Terraform configuration
          npx cdktf synth
          # Ensure tfvars is available alongside the stack
          cp -f terraform.tfvars cdktf.out/stacks/gridpulse-prod/terraform.tfvars
          # Initialize and apply with Terraform directly to avoid CDKTF output parsing
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          terraform -chdir=cdktf.out/stacks/gridpulse-prod apply -auto-approve -input=false -no-color
