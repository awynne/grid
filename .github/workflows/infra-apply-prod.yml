name: Plan + Apply Prod (CDKTF)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type APPLY to apply the planned changes to prod"
        required: true
        type: string

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Decrypt tfvars from SOPS (required for plan)
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          if [ -n "${AGE_PRIVATE_KEY:-}" ]; then
            printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          fi
          if [ ! -f secrets/prod.enc.tfvars ]; then
            echo "secrets/prod.enc.tfvars not found. Commit encrypted tfvars or use Infra Plan workflow." >&2
            exit 1
          fi
          echo "Decrypting prod.enc.tfvars â†’ infrastructure/cdktf/terraform.tfvars"
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars

      - name: Install CDKTF deps
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Plan infrastructure (cdktf)
        working-directory: infrastructure/cdktf
        run: |
          set -e
          npx cdktf plan gridpulse-prod -var-file="terraform.tfvars" | tee plan.txt

      - name: Upload plan output
        uses: actions/upload-artifact@v4
        with:
          name: cdktf-plan
          path: infrastructure/cdktf/plan.txt

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event.inputs.confirm == 'APPLY' }}
    environment:
      name: gridpulse/prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Decrypt or generate tfvars
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          EIA_API_KEY: ${{ secrets.EIA_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          if [ -n "${AGE_PRIVATE_KEY:-}" ]; then
            printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          fi
          if [ -f secrets/prod.enc.tfvars ]; then
            echo "Preparing terraform.tfvars from secrets/prod.enc.tfvars"
            if sops -d secrets/prod.enc.tfvars >/dev/null 2>&1; then
              sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars
            else
              echo "Warning: prod.enc.tfvars not encrypted or decryption failed; will fall back to environment secrets."
            fi
          fi
          if [ ! -f infrastructure/cdktf/terraform.tfvars ]; then
            echo "Generating terraform.tfvars from GitHub environment secrets..."
            {
              echo "railway_token     = \"${{ secrets.RAILWAY_TOKEN }}\""
              echo "project_id        = \"${{ secrets.RAILWAY_PROJECT_ID }}\""
              echo "postgres_password = \"${{ secrets.POSTGRES_PASSWORD }}\""
              echo "session_secret    = \"${{ secrets.SESSION_SECRET }}\""
              echo "eia_api_key       = \"${{ secrets.EIA_API_KEY }}\""
              echo
              echo "docker_image    = \"\""
              echo "docker_username = \"\""
              echo "docker_password = \"\""
            } > infrastructure/cdktf/terraform.tfvars
          fi

      - name: Install CDKTF deps
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Apply infrastructure (cdktf deploy)
        working-directory: infrastructure/cdktf
        run: |
          set -e
          npx cdktf deploy gridpulse-prod --auto-approve -var-file="terraform.tfvars"
