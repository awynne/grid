name: Deploy Prod (Docker + CDKTF)

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: grid
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_TAG: v${{ github.run_number }}-${{ github.sha }}
  DEPLOY_WITH_CDKTF: 'false'
  RAILWAY_TRIGGER_REDEPLOY: 'true'
  RAILWAY_USE_API: 'true'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        if: env.DEPLOY_WITH_CDKTF == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME || github.actor }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" .
          docker tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Push Docker image
        run: |
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Resolve redeploy mode flags
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: |
          set -euo pipefail
          HAS_CLI_SECRET=false
          HAS_API_SECRETS=false
          if [ -n "${RAILWAY_TOKEN:-}" ]; then HAS_CLI_SECRET=true; fi
          if [ -n "${RAILWAY_TOKEN:-}" ] && [ -n "${RAILWAY_ENVIRONMENT_ID:-}" ] && [ -n "${RAILWAY_SERVICE_ID:-}" ]; then HAS_API_SECRETS=true; fi
          echo "HAS_CLI_SECRET=$HAS_CLI_SECRET" >> "$GITHUB_ENV"
          echo "HAS_API_SECRETS=$HAS_API_SECRETS" >> "$GITHUB_ENV"

      - name: Trigger Railway redeploy (registry - CLI)
        if: ${{ env.RAILWAY_TRIGGER_REDEPLOY == 'true' && (env.RAILWAY_USE_API != 'true' || env.HAS_API_SECRETS != 'true') && env.HAS_CLI_SECRET == 'true' }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENV: prod
          RAILWAY_SERVICE: web
        run: |
          set -euo pipefail
          echo "Installing Railway CLI..."
          npm i -g @railway/cli || npm i -g railway
          echo "Seeding Railway CLI auth config..."
          mkdir -p "$HOME/.config/railway" "$HOME/.railway"
          printf '{"token":"%s"}' "$RAILWAY_TOKEN" > "$HOME/.config/railway/config.json"
          cp "$HOME/.config/railway/config.json" "$HOME/.railway/config.json"
          echo "Linking project..."
          railway link --project "$RAILWAY_PROJECT_ID"
          echo "Selecting environment/service..."
          railway environment "$RAILWAY_ENV" || true
          railway service "$RAILWAY_SERVICE" || true
          echo "Triggering redeploy..."
          set +e
          railway redeploy
          code=$?
          set -e
          if [ "$code" -ne 0 ]; then
            echo "Redeploy command unavailable; attempting service restart or up..."
            set +e
            railway service restart || railway up --detach
            set -e
          fi

      - name: Trigger Railway redeploy (registry - API)
        if: ${{ env.RAILWAY_TRIGGER_REDEPLOY == 'true' && env.RAILWAY_USE_API == 'true' && env.HAS_API_SECRETS == 'true' }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: |
          node --version
          node scripts/railway-redeploy.js

      - name: Install CDKTF deps
        if: env.DEPLOY_WITH_CDKTF == 'true'
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Prepare terraform.tfvars
        if: env.DEPLOY_WITH_CDKTF == 'true'
        working-directory: infrastructure/cdktf
        run: |
          cat > terraform.tfvars << 'EOF'
          railway_token     = "${{ secrets.RAILWAY_TOKEN }}"
          project_id        = "${{ secrets.RAILWAY_PROJECT_ID }}"
          postgres_password = "${{ secrets.POSTGRES_PASSWORD }}"
          session_secret    = "${{ secrets.SESSION_SECRET }}"
          eia_api_key       = "${{ secrets.EIA_API_KEY }}"

          docker_image      = "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker_username   = "${{ secrets.GHCR_USERNAME || github.actor }}"
          docker_password   = "${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}"
          EOF

      - name: Deploy prod via CDKTF
        if: env.DEPLOY_WITH_CDKTF == 'true'
        working-directory: infrastructure/cdktf
        run: ./scripts/manage-environments.sh deploy prod

      - name: Wait for deployment readiness
        if: ${{ env.RAILWAY_TRIGGER_REDEPLOY == 'true' && env.HAS_CLI_SECRET == 'true' }}
        run: |
          echo "‚è≥ Waiting for Railway deployment to be ready..."
          echo "This ensures the new container is running before executing migrations."
          sleep 45

      - name: Run post-deployment database migrations
        if: ${{ env.RAILWAY_TRIGGER_REDEPLOY == 'true' && env.HAS_CLI_SECRET == 'true' }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENV: prod
          RAILWAY_SERVICE: web
        run: |
          set -euo pipefail
          echo "üîÑ Running database migrations on Railway prod environment..."
          echo "üìç Target: Railway service 'web' in 'prod' environment"
          
          # Verify Railway CLI is available and configured
          if ! command -v railway >/dev/null 2>&1; then
            echo "üì¶ Installing Railway CLI..."
            npm i -g @railway/cli || npm i -g railway
            
            echo "üîß Configuring Railway CLI authentication..."
            mkdir -p "$HOME/.config/railway" "$HOME/.railway"
            printf '{"token":"%s"}' "$RAILWAY_TOKEN" > "$HOME/.config/railway/config.json"
            cp "$HOME/.config/railway/config.json" "$HOME/.railway/config.json"
          fi
          
          # Link and select environment/service
          echo "üîó Linking to Railway project and selecting environment..."
          railway link --project "$RAILWAY_PROJECT_ID" || true
          railway environment "$RAILWAY_ENV" || echo "‚ö†Ô∏è Environment selection may not be needed"
          railway service "$RAILWAY_SERVICE" || echo "‚ö†Ô∏è Service selection may not be needed"
          
          # Execute database migration script on Railway service
          echo "üöÄ Executing database migration script..."
          set +e
          railway run --service web ./scripts/setup-database.sh
          migration_exit_code=$?
          set -e
          
          # Handle migration results
          if [ "$migration_exit_code" -eq 0 ]; then
            echo "‚úÖ Database migrations completed successfully"
            echo "üìä Migration process executed all steps without errors"
          else
            echo "‚ùå Database migrations failed with exit code $migration_exit_code"
            echo "üîç Troubleshooting information:"
            echo "  - Check Railway service logs: railway logs --service web"
            echo "  - Verify database connectivity and TimescaleDB extension availability"
            echo "  - Check for schema conflicts or database locks"
            echo "  - Ensure all required environment variables are set"
            echo ""
            echo "üö® Deployment considered failed due to migration issues"
            exit 1
          fi

      - name: Post-push note
        if: env.DEPLOY_WITH_CDKTF != 'true'
        run: |
          echo "Docker image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Ensure Railway service source is 'Docker Registry' and tracks this tag (or :latest) to auto-deploy."
