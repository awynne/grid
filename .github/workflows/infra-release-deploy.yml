name: Release and Deploy (Full Pipeline)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type RELEASE_DEPLOY to build image, create PR, auto-merge, and deploy to prod"
        required: true
        type: string

jobs:
  release-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: gridpulse/prod
    permissions:
      contents: write
      packages: write
      pull-requests: write
    env:
      TF_CLOUD_ORG: ${{ secrets.TF_CLOUD_ORG }}
      TF_CLOUD_WORKSPACE: gridpulse-prod
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - name: Guard confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "RELEASE_DEPLOY" ]; then
            echo "Confirmation mismatch. Type RELEASE_DEPLOY exactly to proceed." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Build and push Docker image
        run: |
          echo "🏗️ Building Docker image..."
          
          # Generate incremental daily version tag (e.g., v20250905-01, v20250905-02)
          DATE_PREFIX="v$(date +%Y%m%d)"
          
          # Fetch existing tags to ensure we see remote tags
          git fetch --tags
          
          # Get existing tags for today to determine next increment
          echo "🔍 Looking for existing tags with prefix: ${DATE_PREFIX}-"
          git tag -l "${DATE_PREFIX}-*"
          
          EXISTING_TAGS=$(git tag -l "${DATE_PREFIX}-*" | grep -o "${DATE_PREFIX}-[0-9]\+" | grep -o "[0-9]\+$" | sort -n | tail -1)
          
          if [ -z "$EXISTING_TAGS" ]; then
            INCREMENT="01"
            echo "📝 No existing tags found, using increment: $INCREMENT"
          else
            # Force base-10 interpretation to avoid octal issues with numbers like 08, 09
            INCREMENT=$(printf "%02d" $((10#$EXISTING_TAGS + 1)))
            echo "📝 Found highest existing increment: $EXISTING_TAGS, using next: $INCREMENT"
          fi
          
          VERSION="${DATE_PREFIX}-${INCREMENT}"
          echo "🏷️ Final version tag: $VERSION"
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/grid:$VERSION"
          
          echo "📦 Building image: $IMAGE_TAG"
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Build and push image
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"
          
          echo "✅ Image built and pushed: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          
          # Create and push version tag for tracking (only if it doesn't exist)
          if ! git tag -l | grep -q "^${VERSION}$"; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$VERSION" -m "Docker image build: $IMAGE_TAG"
            git push origin "$VERSION"
            echo "🏷️ Created and pushed tag: $VERSION"
          else
            echo "🏷️ Tag $VERSION already exists, skipping creation"
          fi

      - name: Decrypt tfvars and update docker_image
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          
          echo "🔓 Decrypting secrets/prod.enc.tfvars..."
          sops -d secrets/prod.enc.tfvars > secrets/prod.dec.tfvars
          
          echo "🔄 Updating docker_image to: $IMAGE_TAG"
          sed -i "s|^docker_image = .*|docker_image = \"$IMAGE_TAG\"|" secrets/prod.dec.tfvars
          
          echo "🔒 Re-encrypting with new docker_image..."
          sops -e secrets/prod.dec.tfvars > secrets/prod.enc.tfvars.new
          mv secrets/prod.enc.tfvars.new secrets/prod.enc.tfvars
          rm secrets/prod.dec.tfvars
          
          echo "✅ Updated docker_image in encrypted tfvars"

      - name: Commit docker_image version bump directly to main
        run: |
          echo "🔧 Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Configure git to use the GITHUB_TOKEN for authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          echo "📝 Committing docker_image update directly to main..."
          git add secrets/prod.enc.tfvars
          git commit -m "chore(infra): bump docker_image to $IMAGE_TAG

          - Update production docker image to latest build
          - Contains database connection error handling fixes
          - Auto-generated by Release and Deploy workflow

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          echo "⬆️ Pushing to main..."
          git push origin main
          
          echo "✅ Version bump committed to main successfully"

      - name: Prepare for deployment
        run: |
          echo "✅ Docker image version committed to main"
          echo "🚀 Ready to deploy with updated docker_image: $IMAGE_TAG"

      - name: Decrypt tfvars for deployment
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          
          echo "🔓 Decrypting prod.enc.tfvars for deployment..."
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars
          
          echo "✅ Tfvars ready for deployment"

      - name: Install CDKTF deps and deploy infrastructure
        working-directory: infrastructure/cdktf
        run: |
          echo "📦 Installing CDKTF dependencies..."
          npm ci
          npm run get
          npm run compile

      - name: Synthesize and validate infrastructure
        working-directory: infrastructure/cdktf
        run: |
          echo "⚙️ Synthesizing infrastructure..."
          npx cdktf synth
          
          echo "✅ Infrastructure synthesized successfully"

      - name: Validate docker_image is pinned (no :latest)
        working-directory: infrastructure/cdktf
        run: |
          set -euo pipefail
          if grep -qE '^\s*docker_image\s*=\s*"[^"]*:latest"' terraform.tfvars; then
            echo "❌ Refusing to deploy: docker_image is set to :latest" >&2
            exit 1
          fi
          
          echo "✅ Docker image is properly pinned"

      - name: Deploy infrastructure changes
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          
          echo "🚀 Deploying infrastructure with new docker image..."
          echo "📦 Docker image being deployed: $IMAGE_TAG"
          
          # Log current docker_image value from tfvars for verification
          echo "🔍 Verifying docker_image in tfvars:"
          grep "docker_image" terraform.tfvars || echo "⚠️  docker_image not found in tfvars"
          
          cp -f terraform.tfvars cdktf.out/stacks/gridpulse-prod/terraform.tfvars
          
          echo "🔧 Initializing Terraform..."
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          
          echo "🔍 Current Terraform state before apply:"
          terraform -chdir=cdktf.out/stacks/gridpulse-prod show -json | jq -r '.values.root_module.resources[]? | select(.type == "railway_service" and .name == "web") | "Service ID: " + .values.id' || echo "⚠️ No web service found in state"
          
          echo "🚀 Applying Terraform changes..."
          echo "📦 About to deploy image: $IMAGE_TAG"
          terraform -chdir=cdktf.out/stacks/gridpulse-prod apply -auto-approve -input=false -no-color
          
          echo "🔍 Terraform state after apply:"
          terraform -chdir=cdktf.out/stacks/gridpulse-prod show -json | jq -r '.values.root_module.resources[]? | select(.type == "railway_service" and .name == "web") | "Service ID: " + .values.id + ", Source Image: " + (.values.source_image // "none")' || echo "⚠️ No web service found in state after apply"
          
          echo "✅ Infrastructure deployment completed successfully"
          echo "🎉 Release deployment pipeline completed!"
          echo ""
          echo "**Deployed image**: $IMAGE_TAG"
          echo "**Environment**: prod-02"
          echo "**Status**: ✅ Ready"