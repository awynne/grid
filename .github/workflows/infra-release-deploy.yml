name: Release and Deploy (Full Pipeline)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type RELEASE_DEPLOY to build image, create PR, auto-merge, and deploy to prod"
        required: true
        type: string

jobs:
  release-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: gridpulse/prod
    permissions:
      contents: read
      packages: write
      pull-requests: write
    env:
      TF_CLOUD_ORG: ${{ secrets.TF_CLOUD_ORG }}
      TF_CLOUD_WORKSPACE: gridpulse-prod
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - name: Guard confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "RELEASE_DEPLOY" ]; then
            echo "Confirmation mismatch. Type RELEASE_DEPLOY exactly to proceed." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Build and push Docker image
        run: |
          echo "🏗️ Building Docker image..."
          
          # Generate version tag based on commit
          VERSION="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/grid:$VERSION"
          
          echo "📦 Building image: $IMAGE_TAG"
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Build and push image
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"
          
          echo "✅ Image built and pushed: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Decrypt tfvars and update docker_image
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          
          echo "🔓 Decrypting secrets/prod.enc.tfvars..."
          sops -d secrets/prod.enc.tfvars > secrets/prod.dec.tfvars
          
          echo "🔄 Updating docker_image to: $IMAGE_TAG"
          sed -i "s|^docker_image = .*|docker_image = \"$IMAGE_TAG\"|" secrets/prod.dec.tfvars
          
          echo "🔒 Re-encrypting with new docker_image..."
          sops -e secrets/prod.dec.tfvars > secrets/prod.enc.tfvars.new
          mv secrets/prod.enc.tfvars.new secrets/prod.enc.tfvars
          rm secrets/prod.dec.tfvars
          
          echo "✅ Updated docker_image in encrypted tfvars"

      - name: Create and auto-merge version bump PR
        run: |
          echo "🔧 Configuring git..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          BRANCH_NAME="release/bump-docker-image-$(date +%Y%m%d-%H%M%S)"
          echo "🌿 Creating branch: $BRANCH_NAME"
          
          git checkout -b "$BRANCH_NAME"
          git add secrets/prod.enc.tfvars
          git commit -m "chore(infra): bump docker_image to $IMAGE_TAG
          
          - Update production docker image to latest build
          - Contains database connection error handling fixes
          - Auto-generated by Release and Deploy workflow
          
          🤖 Generated with [Claude Code](https://claude.ai/code)"
          
          echo "⬆️ Pushing branch..."
          git push origin "$BRANCH_NAME"
          
          echo "📋 Creating PR..."
          PR_URL=$(gh pr create \
            --title "chore(infra): bump docker_image to $IMAGE_TAG" \
            --body "## Release Deployment
          
          🚀 **Auto-generated release deployment**
          
          - **Image**: \`$IMAGE_TAG\`
          - **Commit**: \`$(git rev-parse --short HEAD)\`
          - **Changes**: Database connection error handling fixes
          
          ### Changes in this release:
          - Fix database readiness check error handling  
          - Fix migration state check error handling
          - Add proper error event handlers to prevent container crashes
          - Disable TimescaleDB setup for Supabase compatibility
          
          **This PR will be auto-merged and deployed immediately.**
          
          🤖 Generated with [Claude Code](https://claude.ai/code)" \
            --head "$BRANCH_NAME" \
            --base "main")
          
          echo "PR created: $PR_URL"
          
          echo "🔄 Auto-merging PR..."
          sleep 5  # Give GitHub a moment to process the PR
          gh pr merge "$PR_URL" --auto --squash --delete-branch
          
          echo "✅ PR auto-merged successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for PR merge and pull latest changes
        run: |
          echo "⏳ Waiting for PR merge to complete..."
          sleep 10
          
          echo "⬇️ Pulling latest changes from main..."
          git checkout main
          git pull origin main
          
          echo "✅ Ready to deploy with updated docker_image"

      - name: Decrypt tfvars for deployment
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          
          echo "🔓 Decrypting prod.enc.tfvars for deployment..."
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars
          
          echo "✅ Tfvars ready for deployment"

      - name: Install CDKTF deps and deploy infrastructure
        working-directory: infrastructure/cdktf
        run: |
          echo "📦 Installing CDKTF dependencies..."
          npm ci
          npm run get
          npm run compile

      - name: Synthesize and validate infrastructure
        working-directory: infrastructure/cdktf
        run: |
          echo "⚙️ Synthesizing infrastructure..."
          npx cdktf synth
          
          echo "✅ Infrastructure synthesized successfully"

      - name: Validate docker_image is pinned (no :latest)
        working-directory: infrastructure/cdktf
        run: |
          set -euo pipefail
          if grep -qE '^\s*docker_image\s*=\s*"[^"]*:latest"' terraform.tfvars; then
            echo "❌ Refusing to deploy: docker_image is set to :latest" >&2
            exit 1
          fi
          
          echo "✅ Docker image is properly pinned"

      - name: Deploy infrastructure changes
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          
          echo "🚀 Deploying infrastructure with new docker image..."
          cp -f terraform.tfvars cdktf.out/stacks/gridpulse-prod/terraform.tfvars
          
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          terraform -chdir=cdktf.out/stacks/gridpulse-prod apply -auto-approve -input=false -no-color
          
          echo "✅ Infrastructure deployment completed successfully"
          echo "🎉 Release deployment pipeline completed!"
          echo ""
          echo "**Deployed image**: $IMAGE_TAG"
          echo "**Environment**: prod-02"
          echo "**Status**: ✅ Ready"