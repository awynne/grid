name: Recreate Prod (CDKTF)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type RECREATE to confirm you want to destroy and recreate the prod environment"
        required: true
        type: string
      fresh_db:
        description: "Require manual PostgreSQL database reset before recreation - DESTROYS ALL DATA (see workflow output for instructions)"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

jobs:
  recreate:
    runs-on: ubuntu-latest
    environment:
      name: gridpulse/prod
    env:
      TF_CLOUD_ORG: ${{ secrets.TF_CLOUD_ORG }}
      TF_CLOUD_WORKSPACE: gridpulse-prod
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - name: Guard confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "RECREATE" ]; then
            echo "Confirmation mismatch. Type RECREATE exactly to proceed." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Install sops and age
        run: |
          sudo apt-get update
          sudo apt-get install -y age
          SOPS_VERSION=v3.8.1
          curl -Ls https://github.com/getsops/sops/releases/download/$SOPS_VERSION/sops-$SOPS_VERSION.linux.amd64 -o sops
          sudo install -m 0755 sops /usr/local/bin/sops

      - name: Decrypt tfvars (required)
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.config/sops/age
          if [ -z "${AGE_PRIVATE_KEY:-}" ]; then
            echo "AGE_PRIVATE_KEY not set; can't decrypt prod.enc.tfvars" >&2
            exit 1
          fi
          printf "%s\n" "$AGE_PRIVATE_KEY" > ~/.config/sops/age/keys.txt
          if [ ! -f secrets/prod.enc.tfvars ]; then
            echo "secrets/prod.enc.tfvars not found. Commit encrypted tfvars first." >&2
            exit 1
          fi
          echo "Decrypting prod.enc.tfvars ‚Üí infrastructure/cdktf/terraform.tfvars"
          sops -d secrets/prod.enc.tfvars > infrastructure/cdktf/terraform.tfvars

      - name: Install CDKTF deps
        working-directory: infrastructure/cdktf
        run: |
          npm ci
          npm run get
          npm run compile

      - name: Synthesize stack (cdktf synth)
        working-directory: infrastructure/cdktf
        run: npx cdktf synth

      - name: Manual database reset required (fresh_db=true)
        if: github.event.inputs.fresh_db == 'true'
        run: |
          echo "üóÑÔ∏è Database reset requested (fresh_db=true)"
          echo ""
          echo "‚ö†Ô∏è  MANUAL STEP REQUIRED - Railway API is not publicly accessible"
          echo ""
          echo "üîß Before running this workflow, you must manually reset the database:"
          echo ""
          echo "1. Install Railway CLI:"
          echo "   curl -fsSL https://railway.app/install.sh | sh"
          echo ""
          echo "2. Authenticate with Railway:"
          echo "   railway login"
          echo ""
          echo "3. Connect to the GridPulse project:"
          echo "   railway link 10593acb-4a7a-4331-a993-52d24860d1fa"
          echo ""
          echo "4. Switch to prod environment:"
          echo "   railway environment prod"
          echo ""
          echo "5. Reset the database (‚ö†Ô∏è DESTROYS ALL DATA):"
          echo "   railway run --service postgres -- psql -U postgres -d postgres -c \"DROP DATABASE IF EXISTS railway;\""
          echo "   railway run --service postgres -- psql -U postgres -d postgres -c \"CREATE DATABASE railway;\""
          echo ""
          echo "6. Verify database was recreated:"
          echo "   railway run --service postgres -- psql -U postgres -d postgres -c \"\\l\""
          echo ""
          echo "After completing these steps, this workflow will recreate the infrastructure"
          echo "and the PostgreSQL service will initialize with the new password from tfvars."
          echo ""
          echo "‚úÖ Proceeding with infrastructure recreation..."

      - name: Terraform init + destroy
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          # Place tfvars next to synthesized stack
          cp -f terraform.tfvars cdktf.out/stacks/gridpulse-prod/terraform.tfvars
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          # If fresh_db=true, explicitly destroy the postgres service first to ensure a clean data directory
          if [ "${{ github.event.inputs.fresh_db }}" = "true" ]; then
            echo "Forcing Postgres destroy first (fresh_db=true)..."
            terraform -chdir=cdktf.out/stacks/gridpulse-prod destroy -target=railway_service.postgres -auto-approve -input=false -no-color || true
            echo "Also destroying environment to guarantee new service resources (will recreate)..."
            terraform -chdir=cdktf.out/stacks/gridpulse-prod destroy -target=railway_environment.environment -auto-approve -input=false -no-color || true
          fi
          terraform -chdir=cdktf.out/stacks/gridpulse-prod destroy -auto-approve -input=false -no-color || true

      - name: Terraform apply (recreate)
        working-directory: infrastructure/cdktf
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          set -euo pipefail
          # After destroy, ensure init (no-op if already initialized)
          terraform -chdir=cdktf.out/stacks/gridpulse-prod init -input=false -no-color
          terraform -chdir=cdktf.out/stacks/gridpulse-prod apply -auto-approve -input=false -no-color
